{"remainingRequest":"D:\\Documents\\tddd27_2021\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Documents\\tddd27_2021\\src\\components\\NewAppointment.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"D:\\Documents\\tddd27_2021\\src\\components\\NewAppointment.vue","mtime":1622722378157},{"path":"D:\\Documents\\tddd27_2021\\node_modules\\css-loader\\dist\\cjs.js","mtime":1622558184171},{"path":"D:\\Documents\\tddd27_2021\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1622558196444},{"path":"D:\\Documents\\tddd27_2021\\node_modules\\postcss-loader\\src\\index.js","mtime":1622558191570},{"path":"D:\\Documents\\tddd27_2021\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1622558180778},{"path":"D:\\Documents\\tddd27_2021\\node_modules\\vue-loader\\lib\\index.js","mtime":1622558196442}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KI25ldy1hcHBvaW50bWVudHsNCiAgcGFkZGluZy10b3A6IDIwcHgNCn0NCg0K"},{"version":3,"sources":["NewAppointment.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyLA;AACA;AACA","file":"NewAppointment.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <!-- Button to open the modal -->\r\n  <div>\r\n    <b-container fluid>\r\n      <b-row id=\"new-appointment\">\r\n        <b-col col sm=\"12\" md=\"12\" lg=\"9\" xl=\"9\" class=\"p-2\">\r\n            <b-button variant=\"primary\" v-b-modal.modal-prevent-closing>New Appointment</b-button>\r\n        </b-col>\r\n      </b-row>\r\n    </b-container>\r\n\r\n    <!-- The modal with the form -->\r\n    <b-modal\r\n      id=\"modal-prevent-closing\"\r\n      ref=\"modal\"\r\n      title=\"Book An Appointment\"\r\n      @show=\"resetModal\"\r\n      @hidden=\"resetModal\"\r\n      @ok=\"handleOk\"\r\n      >\r\n      <form ref=\"form\" @submit.prevent=\"addAppointment\">\r\n        <b-form-group\r\n          label=\"Select a date\"\r\n          label-for=\"date-input\"\r\n          invalid-feedback=\"Date is required\"\r\n          :state=\"dateState\">\r\n          <b-form-datepicker id=\"datepicker-dateformat\" \r\n            :date-disabled-fn=\"dateDisabled\"\r\n            :min=\"min\"\r\n            :max=\"max\"\r\n            :date-format-options=\"{ weekday: 'long', day: 'numeric',month: 'long', year: 'numeric'}\"\r\n            v-model=\"appointment.date\"\r\n            required>\r\n          </b-form-datepicker>\r\n        </b-form-group>\r\n        <b-form-group \r\n          v-if=\"this.appointment.date != ''\"\r\n          label=\"Select a time\"\r\n          label-for=\"time-input\"\r\n          invalid-feedback=\"Time is required\"\r\n          :state=\"timeState\">\r\n          <b-form-radio-group class=\"pt-2\" \r\n            :options=\"printTimes(tempArray)\"  \r\n            v-model=\"appointment.time\"\r\n            required>\r\n          </b-form-radio-group>\r\n        </b-form-group>\r\n      </form>\r\n      <template #modal-footer=\"{ok}\">\r\n      <!-- Emulate built in modal footer ok and cancel button actions -->\r\n     \r\n      <b-button variant=\"success\" @click=\"ok()\">\r\n        Book Appointment\r\n      </b-button>\r\n    </template>\r\n    </b-modal>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"newAppointment\",\r\n  data(){\r\n    // Start from todays date\r\n    const now = new Date()\r\n    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate())\r\n    const minDate = new Date(today)\r\n    const maxDate = new Date(today)\r\n    maxDate.setMonth(maxDate.getMonth() + 6)\r\n\r\n    return {\r\n      afterSubmit: false,\r\n      min: minDate,\r\n      max: maxDate,\r\n      interval: null,\r\n      tempArray: [],\r\n      dateState:null,\r\n      timeState:null,\r\n      appointment:{\r\n        date: '',\r\n        email: this.$auth.user.email,\r\n      }\r\n    }\r\n  },\r\n  // makes the data updated without refreshing page\r\n  async mounted(){\r\n    this.interval = setInterval(this.refreshTimes, 50)\r\n  },\r\n  methods: {\r\n    // Get every booked appointment from database\r\n    async refreshTimes(){\r\n      let uri = 'http://localhost:4000/appointments/all'\r\n      const token = await this.$auth.getTokenSilently();\r\n        \r\n      await this.axios.get(uri, {\r\n        headers:{\r\n          Authorization: `Bearer ${token}`,\r\n          \"Content-type\": \"application/json\"\r\n        },\r\n      }).then(response => {\r\n          this.tempArray = response.data\r\n      })\r\n    },\r\n    // Checks if date and time is entered\r\n    checkFormValidity() {\r\n      if(this.appointment.date === ''){\r\n        this.dateState = false\r\n        return false\r\n      } else {\r\n        this.dateState = true\r\n      }\r\n      if(this.appointment.time === ''){\r\n        this.timeState = false\r\n        return false\r\n      } else {\r\n        this.timeState = true\r\n      }\r\n        \r\n      return true\r\n    },\r\n    // Reset the entered values when closing the modal\r\n    resetModal() {\r\n      this.appointment.date = ''\r\n      this.appointment.time = ''\r\n      this.dateState = null\r\n      this.timeState = null\r\n    },\r\n    // Prevent from closing if the values are not valid\r\n    handleOk(bvModalEvt) {\r\n      // Prevent modal from closing\r\n      bvModalEvt.preventDefault()\r\n      // Trigger submit handler\r\n      this.addAppointment()\r\n    },\r\n    // Submit the form and add the new appointment to the database\r\n    async addAppointment(){\r\n      if(!this.checkFormValidity()){\r\n        return\r\n      } \r\n\r\n      let uri = 'http://localhost:4000/appointments/add';\r\n      const token = await this.$auth.getTokenSilently();\r\n\r\n      this.axios.post(uri, JSON.stringify(this.appointment), {\r\n        headers:{\r\n          Authorization: `Bearer ${token}`,\r\n          'content-type': 'application/json'\r\n        }\r\n      })\r\n\r\n      // \"close\" the modal\r\n      this.$nextTick(() => {\r\n        this.$bvModal.hide('modal-prevent-closing')\r\n      })\r\n\r\n      // reset values after submit\r\n      this.appointment.date = ''\r\n      this.appointment.time = ''\r\n    },\r\n    // Disable weekends\r\n    dateDisabled(ymd, date) {\r\n      const weekday = date.getDay()\r\n      // Return `true` if the date should be disabled\r\n      return weekday === 0 || weekday === 6\r\n    },\r\n    // Find available times and print them out\r\n    printTimes(tempArray){\r\n      var times = ['8:00 - 9:00', '9:00 - 10:00', '10:00 - 11:00', '11:00 - 12:00', '13:00 - 14:00', '14:00 - 15:00', '15:00 - 16:00', '16:00 - 17:00'] \r\n      \r\n      for(var i = 0; i < tempArray.length; i++){\r\n        if(this.appointment.date == tempArray[i].date){\r\n          for(var j = 0; j < times.length; j++){\r\n            if(times[j] == tempArray[i].time){\r\n              delete times[j]\r\n            }\r\n          }   \r\n        }\r\n      } \r\n      return times\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n#new-appointment{\r\n  padding-top: 20px\r\n}\r\n\r\n</style>\r\n"]}]}